// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mixinsnapshotFieldNames          = builder.RawFieldNames(&Mixinsnapshot{})
	mixinsnapshotRows                = strings.Join(mixinsnapshotFieldNames, ",")
	mixinsnapshotRowsExpectAutoSet   = strings.Join(stringx.Remove(mixinsnapshotFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mixinsnapshotRowsWithPlaceHolder = strings.Join(stringx.Remove(mixinsnapshotFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBetxinMixinsnapshotIdPrefix = "cache:betxin:mixinsnapshot:id:"
)

type (
	mixinsnapshotModel interface {
		Insert(ctx context.Context, data *Mixinsnapshot) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Mixinsnapshot, error)
		Update(ctx context.Context, data *Mixinsnapshot) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMixinsnapshotModel struct {
		sqlc.CachedConn
		table string
	}

	Mixinsnapshot struct {
		Id             int64     `db:"id"`
		SnapshotId     string    `db:"snapshot_id"`
		TraceId        string    `db:"trace_id"`
		AssetId        string    `db:"asset_id"`
		OpponentId     string    `db:"opponent_id"`
		Amount         float64   `db:"amount"`
		Memo           string    `db:"memo"`
		Type           string    `db:"type"`
		OpeningBalance float64   `db:"opening_balance"`
		ClosingBalance float64   `db:"closing_balance"`
		CreatedAt      time.Time `db:"created_at"`
	}
)

func newMixinsnapshotModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMixinsnapshotModel {
	return &defaultMixinsnapshotModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`mixinsnapshot`",
	}
}

func (m *defaultMixinsnapshotModel) Delete(ctx context.Context, id int64) error {
	betxinMixinsnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinMixinsnapshotIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, betxinMixinsnapshotIdKey)
	return err
}

func (m *defaultMixinsnapshotModel) FindOne(ctx context.Context, id int64) (*Mixinsnapshot, error) {
	betxinMixinsnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinMixinsnapshotIdPrefix, id)
	var resp Mixinsnapshot
	err := m.QueryRowCtx(ctx, &resp, betxinMixinsnapshotIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mixinsnapshotRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMixinsnapshotModel) Insert(ctx context.Context, data *Mixinsnapshot) (sql.Result, error) {
	betxinMixinsnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinMixinsnapshotIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, mixinsnapshotRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SnapshotId, data.TraceId, data.AssetId, data.OpponentId, data.Amount, data.Memo, data.Type, data.OpeningBalance, data.ClosingBalance)
	}, betxinMixinsnapshotIdKey)
	return ret, err
}

func (m *defaultMixinsnapshotModel) Update(ctx context.Context, data *Mixinsnapshot) error {
	betxinMixinsnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinMixinsnapshotIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mixinsnapshotRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SnapshotId, data.TraceId, data.AssetId, data.OpponentId, data.Amount, data.Memo, data.Type, data.OpeningBalance, data.ClosingBalance, data.Id)
	}, betxinMixinsnapshotIdKey)
	return err
}

func (m *defaultMixinsnapshotModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBetxinMixinsnapshotIdPrefix, primary)
}

func (m *defaultMixinsnapshotModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mixinsnapshotRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMixinsnapshotModel) tableName() string {
	return m.table
}
