// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: categorysrv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategorysrvClient is the client API for Categorysrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategorysrvClient interface {
	// -----------------------category-----------------------
	AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error)
	DelCategory(ctx context.Context, in *DelCategoryReq, opts ...grpc.CallOption) (*DelCategoryResp, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdReq, opts ...grpc.CallOption) (*GetCategoryByIdResp, error)
	SearchCategory(ctx context.Context, in *SearchCategoryReq, opts ...grpc.CallOption) (*SearchCategoryResp, error)
	ListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error)
}

type categorysrvClient struct {
	cc grpc.ClientConnInterface
}

func NewCategorysrvClient(cc grpc.ClientConnInterface) CategorysrvClient {
	return &categorysrvClient{cc}
}

func (c *categorysrvClient) AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error) {
	out := new(AddCategoryResp)
	err := c.cc.Invoke(ctx, "/pb.categorysrv/AddCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysrvClient) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error) {
	out := new(UpdateCategoryResp)
	err := c.cc.Invoke(ctx, "/pb.categorysrv/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysrvClient) DelCategory(ctx context.Context, in *DelCategoryReq, opts ...grpc.CallOption) (*DelCategoryResp, error) {
	out := new(DelCategoryResp)
	err := c.cc.Invoke(ctx, "/pb.categorysrv/DelCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysrvClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdReq, opts ...grpc.CallOption) (*GetCategoryByIdResp, error) {
	out := new(GetCategoryByIdResp)
	err := c.cc.Invoke(ctx, "/pb.categorysrv/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysrvClient) SearchCategory(ctx context.Context, in *SearchCategoryReq, opts ...grpc.CallOption) (*SearchCategoryResp, error) {
	out := new(SearchCategoryResp)
	err := c.cc.Invoke(ctx, "/pb.categorysrv/SearchCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysrvClient) ListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error) {
	out := new(ListCategoryResp)
	err := c.cc.Invoke(ctx, "/pb.categorysrv/ListCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategorysrvServer is the server API for Categorysrv service.
// All implementations must embed UnimplementedCategorysrvServer
// for forward compatibility
type CategorysrvServer interface {
	// -----------------------category-----------------------
	AddCategory(context.Context, *AddCategoryReq) (*AddCategoryResp, error)
	UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryResp, error)
	DelCategory(context.Context, *DelCategoryReq) (*DelCategoryResp, error)
	GetCategoryById(context.Context, *GetCategoryByIdReq) (*GetCategoryByIdResp, error)
	SearchCategory(context.Context, *SearchCategoryReq) (*SearchCategoryResp, error)
	ListCategory(context.Context, *ListCategoryReq) (*ListCategoryResp, error)
	mustEmbedUnimplementedCategorysrvServer()
}

// UnimplementedCategorysrvServer must be embedded to have forward compatible implementations.
type UnimplementedCategorysrvServer struct {
}

func (UnimplementedCategorysrvServer) AddCategory(context.Context, *AddCategoryReq) (*AddCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedCategorysrvServer) UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCategorysrvServer) DelCategory(context.Context, *DelCategoryReq) (*DelCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCategory not implemented")
}
func (UnimplementedCategorysrvServer) GetCategoryById(context.Context, *GetCategoryByIdReq) (*GetCategoryByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedCategorysrvServer) SearchCategory(context.Context, *SearchCategoryReq) (*SearchCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCategory not implemented")
}
func (UnimplementedCategorysrvServer) ListCategory(context.Context, *ListCategoryReq) (*ListCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategory not implemented")
}
func (UnimplementedCategorysrvServer) mustEmbedUnimplementedCategorysrvServer() {}

// UnsafeCategorysrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategorysrvServer will
// result in compilation errors.
type UnsafeCategorysrvServer interface {
	mustEmbedUnimplementedCategorysrvServer()
}

func RegisterCategorysrvServer(s grpc.ServiceRegistrar, srv CategorysrvServer) {
	s.RegisterService(&Categorysrv_ServiceDesc, srv)
}

func _Categorysrv_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysrvServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.categorysrv/AddCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysrvServer).AddCategory(ctx, req.(*AddCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorysrv_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysrvServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.categorysrv/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysrvServer).UpdateCategory(ctx, req.(*UpdateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorysrv_DelCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysrvServer).DelCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.categorysrv/DelCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysrvServer).DelCategory(ctx, req.(*DelCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorysrv_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysrvServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.categorysrv/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysrvServer).GetCategoryById(ctx, req.(*GetCategoryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorysrv_SearchCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysrvServer).SearchCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.categorysrv/SearchCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysrvServer).SearchCategory(ctx, req.(*SearchCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorysrv_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysrvServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.categorysrv/ListCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysrvServer).ListCategory(ctx, req.(*ListCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Categorysrv_ServiceDesc is the grpc.ServiceDesc for Categorysrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Categorysrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.categorysrv",
	HandlerType: (*CategorysrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCategory",
			Handler:    _Categorysrv_AddCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Categorysrv_UpdateCategory_Handler,
		},
		{
			MethodName: "DelCategory",
			Handler:    _Categorysrv_DelCategory_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _Categorysrv_GetCategoryById_Handler,
		},
		{
			MethodName: "SearchCategory",
			Handler:    _Categorysrv_SearchCategory_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _Categorysrv_ListCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "categorysrv.proto",
}
