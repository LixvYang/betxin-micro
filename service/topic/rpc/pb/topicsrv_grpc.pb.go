// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: topicsrv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopicsrvClient is the client API for Topicsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicsrvClient interface {
	// -----------------------topic-----------------------
	AddTopic(ctx context.Context, in *AddTopicReq, opts ...grpc.CallOption) (*AddTopicResp, error)
	UpdateTopic(ctx context.Context, in *UpdateTopicReq, opts ...grpc.CallOption) (*UpdateTopicResp, error)
	DelTopic(ctx context.Context, in *DelTopicReq, opts ...grpc.CallOption) (*DelTopicResp, error)
	GetTopicById(ctx context.Context, in *GetTopicByIdReq, opts ...grpc.CallOption) (*GetTopicByIdResp, error)
	SearchTopic(ctx context.Context, in *SearchTopicReq, opts ...grpc.CallOption) (*SearchTopicResp, error)
	ListTopic(ctx context.Context, in *ListTopicReq, opts ...grpc.CallOption) (*ListTopicResp, error)
}

type topicsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicsrvClient(cc grpc.ClientConnInterface) TopicsrvClient {
	return &topicsrvClient{cc}
}

func (c *topicsrvClient) AddTopic(ctx context.Context, in *AddTopicReq, opts ...grpc.CallOption) (*AddTopicResp, error) {
	out := new(AddTopicResp)
	err := c.cc.Invoke(ctx, "/pb.topicsrv/AddTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicsrvClient) UpdateTopic(ctx context.Context, in *UpdateTopicReq, opts ...grpc.CallOption) (*UpdateTopicResp, error) {
	out := new(UpdateTopicResp)
	err := c.cc.Invoke(ctx, "/pb.topicsrv/UpdateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicsrvClient) DelTopic(ctx context.Context, in *DelTopicReq, opts ...grpc.CallOption) (*DelTopicResp, error) {
	out := new(DelTopicResp)
	err := c.cc.Invoke(ctx, "/pb.topicsrv/DelTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicsrvClient) GetTopicById(ctx context.Context, in *GetTopicByIdReq, opts ...grpc.CallOption) (*GetTopicByIdResp, error) {
	out := new(GetTopicByIdResp)
	err := c.cc.Invoke(ctx, "/pb.topicsrv/GetTopicById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicsrvClient) SearchTopic(ctx context.Context, in *SearchTopicReq, opts ...grpc.CallOption) (*SearchTopicResp, error) {
	out := new(SearchTopicResp)
	err := c.cc.Invoke(ctx, "/pb.topicsrv/SearchTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicsrvClient) ListTopic(ctx context.Context, in *ListTopicReq, opts ...grpc.CallOption) (*ListTopicResp, error) {
	out := new(ListTopicResp)
	err := c.cc.Invoke(ctx, "/pb.topicsrv/ListTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicsrvServer is the server API for Topicsrv service.
// All implementations must embed UnimplementedTopicsrvServer
// for forward compatibility
type TopicsrvServer interface {
	// -----------------------topic-----------------------
	AddTopic(context.Context, *AddTopicReq) (*AddTopicResp, error)
	UpdateTopic(context.Context, *UpdateTopicReq) (*UpdateTopicResp, error)
	DelTopic(context.Context, *DelTopicReq) (*DelTopicResp, error)
	GetTopicById(context.Context, *GetTopicByIdReq) (*GetTopicByIdResp, error)
	SearchTopic(context.Context, *SearchTopicReq) (*SearchTopicResp, error)
	ListTopic(context.Context, *ListTopicReq) (*ListTopicResp, error)
	mustEmbedUnimplementedTopicsrvServer()
}

// UnimplementedTopicsrvServer must be embedded to have forward compatible implementations.
type UnimplementedTopicsrvServer struct {
}

func (UnimplementedTopicsrvServer) AddTopic(context.Context, *AddTopicReq) (*AddTopicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopic not implemented")
}
func (UnimplementedTopicsrvServer) UpdateTopic(context.Context, *UpdateTopicReq) (*UpdateTopicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopic not implemented")
}
func (UnimplementedTopicsrvServer) DelTopic(context.Context, *DelTopicReq) (*DelTopicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTopic not implemented")
}
func (UnimplementedTopicsrvServer) GetTopicById(context.Context, *GetTopicByIdReq) (*GetTopicByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicById not implemented")
}
func (UnimplementedTopicsrvServer) SearchTopic(context.Context, *SearchTopicReq) (*SearchTopicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTopic not implemented")
}
func (UnimplementedTopicsrvServer) ListTopic(context.Context, *ListTopicReq) (*ListTopicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopic not implemented")
}
func (UnimplementedTopicsrvServer) mustEmbedUnimplementedTopicsrvServer() {}

// UnsafeTopicsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicsrvServer will
// result in compilation errors.
type UnsafeTopicsrvServer interface {
	mustEmbedUnimplementedTopicsrvServer()
}

func RegisterTopicsrvServer(s grpc.ServiceRegistrar, srv TopicsrvServer) {
	s.RegisterService(&Topicsrv_ServiceDesc, srv)
}

func _Topicsrv_AddTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsrvServer).AddTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.topicsrv/AddTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsrvServer).AddTopic(ctx, req.(*AddTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topicsrv_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsrvServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.topicsrv/UpdateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsrvServer).UpdateTopic(ctx, req.(*UpdateTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topicsrv_DelTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsrvServer).DelTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.topicsrv/DelTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsrvServer).DelTopic(ctx, req.(*DelTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topicsrv_GetTopicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsrvServer).GetTopicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.topicsrv/GetTopicById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsrvServer).GetTopicById(ctx, req.(*GetTopicByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topicsrv_SearchTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsrvServer).SearchTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.topicsrv/SearchTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsrvServer).SearchTopic(ctx, req.(*SearchTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topicsrv_ListTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsrvServer).ListTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.topicsrv/ListTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsrvServer).ListTopic(ctx, req.(*ListTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Topicsrv_ServiceDesc is the grpc.ServiceDesc for Topicsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Topicsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.topicsrv",
	HandlerType: (*TopicsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTopic",
			Handler:    _Topicsrv_AddTopic_Handler,
		},
		{
			MethodName: "UpdateTopic",
			Handler:    _Topicsrv_UpdateTopic_Handler,
		},
		{
			MethodName: "DelTopic",
			Handler:    _Topicsrv_DelTopic_Handler,
		},
		{
			MethodName: "GetTopicById",
			Handler:    _Topicsrv_GetTopicById_Handler,
		},
		{
			MethodName: "SearchTopic",
			Handler:    _Topicsrv_SearchTopic_Handler,
		},
		{
			MethodName: "ListTopic",
			Handler:    _Topicsrv_ListTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topicsrv.proto",
}
